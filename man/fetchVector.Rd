% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetchSpatial.R
\name{fetchVector}
\alias{fetchVector}
\title{Retrieve vector files from the database}
\usage{
fetchVector(
  geom_id = NULL,
  layer_name = NULL,
  feature_name = NULL,
  geom_type = NULL,
  return_cols = c("geom_id", "geom_type", "layer_name", "feature_name", "description"),
  table = "vectors",
  geom_col = "geom",
  con = hydrometConnect()
)
}
\arguments{
\item{geom_id}{A numeric vector of geom_ids from the 'vectors' table.}

\item{layer_name}{A character vector (one or more elements) specifying the target layer_name from the 'vectors' table.}

\item{feature_name}{A character vector (one or more elements) specifying the target feature_name from the 'vectors' table.}

\item{geom_type}{One of c('ST_Point', 'ST_MultiPoint', 'ST_LineString', 'ST_MultiLineString', 'ST_Polygon', 'ST_MultiPolygon').}

\item{return_cols}{The names of columns to return.}

\item{table}{The target table in the database (as character string). If not under the public schema, use format c("schema", "table").}

\item{geom_col}{The name of the database table column in which to insert the geometry object.}

\item{con}{A connection to the target database.}
}
\value{
If successful, a terra object. If unsuccessful because the query targets more than 1 geometry types, a table showing you the result of the query.
}
\description{
This function formulates an SQL query to retrieve points, lines, or polygons from the database and returns them as a terra object. At minimum, only one of \code{geom_id}, \code{layer_name}, \code{feature_name}, or \code{geom_type} are required, though if the combination you enter results in more than one geom_type you will get a descriptive error.
}
