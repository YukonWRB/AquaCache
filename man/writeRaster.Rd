% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/writeRaster.R
\name{writeRaster}
\alias{writeRaster}
\title{Write raster to PostGIS database (psql version)}
\usage{
writeRaster(
  con,
  raster,
  rast_table = c("spatial", "rasters"),
  bit.depth = NULL,
  blocks = NULL,
  constraints = FALSE
)
}
\arguments{
\item{con}{A connection object to a PostgreSQL database.}

\item{raster}{A terra \code{SpatRaster}.}

\item{rast_table}{A character string specifying a PostgreSQL schema in the database (if necessary) and table name to hold the raster (e.g., \code{c("schema","table")}).}

\item{bit.depth}{The bit depth of the raster. Will be set to 32-bit (unsigned int, signed int, or float, depending on the data) if left null, but can be specified (as character) as one of the PostGIS pixel types (see \url{http://postgis.net/docs/RT_ST_BandPixelType.html}).}

\item{blocks}{Optional desired number of blocks (tiles) to split the raster into in the resulting PostGIS table. This should be specified as a one or two-length (columns, rows) integer vector. See also 'Details'.}

\item{constraints}{Whether to reset constraints. Will drop all constraints except for SRID.}
}
\value{
A list with TRUE for successful import and the rid(s) of the appended entries.
}
\description{
This function is not meant to be used by itself: in most cases use \code{\link[=insertACModelRaster]{insertACModelRaster()}} or \code{\link[=insertACRaster]{insertACRaster()}} which will populate reference tables so that your raster can be easily found later.

Sends R raster data to a PostGIS database table via the \code{raster2pgsql}/\code{psql}
toolchain so it can be fetched later into an R environment. This helper keeps
the existing \code{spatial.rasters}/\code{spatial.rasters_reference} relationship intact
by appending tiles to the raster table and returning the new \code{rid} values. The
target raster table must already exist before calling this helper and both
\code{raster2pgsql} and \code{psql} must be available on the system PATH.
}
\details{
SpatRaster band names will be stored in an array in the column
"band_names", which will be restored in R when imported with the function
\code{\link[rpostgis]{pgGetRast}}.

If \code{blocks = NULL}, the raster is uploaded as a single tile. When a
1- or 2-length integer vector is supplied, it represents the desired number
of tiles along the X and Y axes; the raster will be uploaded in tiles sized
\code{ceiling(ncol(raster) / blocks[1])} by \code{ceiling(nrow(raster) / blocks[2])}
pixels. Fewer, larger tiles generally result in faster uploads and downloads.
Each tile is inserted as a brand-new row, so previously stored rasters remain
untouched regardless of how much data is already present in the table. PostGIS
rasters do not need to share a common tiling scheme, so older uploads and new
inserts retrieved through the same reference_id workflow continue to behave in
exactly the same way even when their tile dimensions differ.

If the raster has no CRS specified, it will be assigned
\code{EPSG:4326} before being written. This avoids importing
tiles with an SRID of 0, which can lead to "Multiple SRIDs"
errors when reading the raster back.
}
\keyword{internal}
